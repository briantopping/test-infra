#!/usr/bin/env python3

import dataclasses
import os
import yaml

import ci.util
import ocm

component_descriptor_base_path = os.path.abspath(ci.util.check_env('BASE_DEFINITION_PATH'))
component_descriptor_path = os.path.abspath(ci.util.check_env('COMPONENT_DESCRIPTOR_PATH'))

own_dir = os.path.abspath(os.path.dirname(__file__))
repo_dir = os.path.abspath(os.path.join(own_dir, os.pardir))
RESOURCES_FILE = os.path.join(repo_dir, '.ocm' ,'resources.yaml')

def parse_component_descriptor():
    component_descriptor = ocm.ComponentDescriptor.from_dict(
        ci.util.parse_yaml_file(component_descriptor_base_path)
    )
    return component_descriptor

def iter_resources():
    resources = ci.util.parse_yaml_file(RESOURCES_FILE)
    for resource in resources:
        yield ocm.Resource(name=resource['name'],version=resource['version'],type=ocm.ArtefactType.OCI_IMAGE,access=ocm.OciAccess(imageReference=resource['imageReference']))


component_descriptor = parse_component_descriptor()
component = component_descriptor.component
component.resources.extend(list(iter_resources()))

with open(component_descriptor_path, 'w') as f:
    yaml.dump(
        data=dataclasses.asdict(component_descriptor),
        Dumper=ocm.EnumValueYamlDumper,
        stream=f,
    )
